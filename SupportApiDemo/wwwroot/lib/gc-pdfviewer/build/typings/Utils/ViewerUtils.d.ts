import { AnnotationBase, StampAnnotation } from "../Annotations/AnnotationTypes";
export declare function generateUid(caller?: string): string;
export declare function resetStampAspectRatio(imageData: Uint8Array, viewer: any, pageIndex: number, originalNode: StampAnnotation, imageDpi?: number, select?: boolean): Promise<{
    pageIndex: number;
    annotation: AnnotationBase;
} | null>;
export declare function isTypedArray(arr: any): boolean;
export declare function mergeObject(destinationObj: any, sourceVal: any, preserveNonEmpty?: boolean): any;
export declare function getTransformMatrix(viewBox: number[], rotation: number, scaleX: number, scaleY: number, ignoreRotate?: boolean): number[];
export declare function adjustCoordinates(realViewBox: number[], point: number[], rotation: number, inverse?: boolean, fromBottomLeft?: boolean, scale?: number): number[];
export declare function getAxialAlignedBoundingBox(r: any, m: any): number[];
export declare function applyTransform(p: number[], m: number[]): number[];
export declare function applyInverseTransform(p: number[], m: number[]): number[];
export declare function inverseTransform(m: number[]): number[];
export declare function convertToViewportPoint(x: number, y: number, transform: number[]): number[];
export declare function convertToPdfPoint(x: number, y: number, transform: number[]): number[];
export declare function changeRectangleOrigin(bounds: number[], viewBox: number[], destOrigin?: 'TopLeft' | 'BottomLeft'): number[];
export declare function pdfDateStringToDate(input?: string | Date): Date | null;
export declare function formatRelativeDate(date: Date | null): string;
export declare function humanReadableFileSize(size: number, in17n: any): string;
export declare function getDefaultUserName(): string;
export declare function getActiveUserName(options?: any): string;
export declare function setActiveUserName(userName: string, setBy: 'annotation_editor' | 'user'): void;
export declare function attachHeadJs(src: string, id?: string, ownerDoc?: ShadowRoot | Document): Promise<any>;
export declare function attachHeadCss(css: any, id?: string, ownerDoc?: ShadowRoot | Document): void;
export declare function detachHeadJs(id: string, ownerDoc?: ShadowRoot | Document): void;
export declare function detachHeadCss(id: string, ownerDoc?: ShadowRoot | Document): void;
export declare function moveInkLists(inkLists: {
    x: number;
    y: number;
}[][], deltaX: number, deltaY: number): void;
export declare function getAccentTextColor(): string;
export declare function sortedIndex(array: number[], value: number): number;
export declare function isEditorModeEnabled(container: HTMLElement): boolean;
export declare function logMessage(msg: string): void;
export declare function logError(msg: any): void;
export declare function setInputCheckedState(element: HTMLInputElement, isChecked: boolean, linkService: any): void;
export declare function updateInputCheckedAppearance(input: HTMLInputElement, isChecked?: boolean, checkedButtonValue?: string | null): void;
export declare function updateAnnotationContentPosition(node: AnnotationBase, diffx?: number, diffy?: number): void;
